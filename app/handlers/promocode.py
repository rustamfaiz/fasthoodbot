from aiogram import Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()

@router.callback_query(lambda c: c.data in ["region_ru", "region_other"])
async def ask_promocode(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="–í–≤–µ—Å—Ç–∏", callback_data="enter_code")
    builder.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–¥–∞", callback_data="skip_code")
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="get_book")
    builder.adjust(1)

    await callback.message.answer(
        "üìç –£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?",
        reply_markup=builder.as_markup()
    )
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()

# –≠—Ç–∞–ø –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
@router.callback_query(lambda c: c.data in ["region_ru", "region_other"])
async def ask_promocode(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(region=callback.data)
    builder = InlineKeyboardBuilder()
    builder.button(text="–í–≤–µ—Å—Ç–∏", callback_data="enter_code")
    builder.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–¥–∞", callback_data="skip_code")
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="get_book")
    builder.adjust(1)
    await callback.message.answer("üìç –£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?", reply_markup=builder.as_markup())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PromoStates(StatesGroup):
    waiting_code = State()

# –ù–∞–∂–∞–ª–∏ "–í–≤–µ—Å—Ç–∏"
@router.callback_query(F.data == "enter_code")
async def ask_code(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥:")
    await state.set_state(PromoStates.waiting_code)

# –ü–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥
@router.message(PromoStates.waiting_code)
async def process_code(message: types.Message, state: FSMContext):
    code = message.text.strip().lower()
    valid_codes = ["fast100", "rustam50"]  # üîÅ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏–∑ –ë–î

    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="after_code")
    builder.adjust(1)

    if code in valid_codes:
        await state.update_data(promocode=code)
        await message.answer("‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –£—á—Ç—ë–º –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ü–µ–Ω—ã.", reply_markup=builder.as_markup())
    else:
        await state.update_data(promocode=None)
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª. –ú–æ–∂–µ–º –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ –∏ –±–µ–∑ –Ω–µ–≥–æ ‚Äî —è –¥–∞–º —Ç–µ–±–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é —Å–∫–∏–¥–∫—É –æ—Ç –∞–≤—Ç–æ—Ä–∞.", reply_markup=builder.as_markup())

    await state.clear()

# "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–¥–∞"
@router.callback_query(F.data == "skip_code")
async def skip_code(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(promocode=None)
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="after_code")
    builder.adjust(1)
    await callback.message.answer("–°–∫–∏–¥–∫–∞ –æ—Ç –º–µ–Ω—è. –ë–µ–∑ —É—Å–ª–æ–≤–∏–π. –ë–µ–∑ –∫–æ–¥–æ–≤.", reply_markup=builder.as_markup())
