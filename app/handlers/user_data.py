from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.pdf_generator import generate_personal_pdf

ADMIN_ID = 335067126  # Telegram ID –∞–¥–º–∏–Ω–∞

router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data_dict = {}

class Form(StatesGroup):
    waiting_for_payment_screenshot = State()
    waiting_for_name = State()
    waiting_for_phone = State()

# üü¢ –®–∞–≥ 1 ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª
@router.callback_query(F.data == "confirm_payment_started")
async def ask_payment_proof(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üßæ –ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ ‚Äî –∏–ª–∏ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n\n"
        "–¢–∞–∫ –º—ã –±—ã—Å—Ç—Ä–µ–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –ø–ª–∞—Ç—ë–∂ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ç–≤–æ—é –∫–Ω–∏–≥—É."
    )
    await state.set_state(Form.waiting_for_payment_screenshot)

# üü¢ –®–∞–≥ 2 ‚Äî –ø–æ–ª—É—á–∏–ª —Å–∫—Ä–∏–Ω ‚Üí –ø—Ä–æ—Å–∏–º –§–ò–û
@router.message(Form.waiting_for_payment_screenshot, F.photo)
async def ask_full_name(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    await state.update_data(screenshot_file_id=file_id)

    await message.answer("üìù –í–≤–µ–¥–∏ —Å–≤–æ—ë **–§–ò–û** ‚Äî —Ç–∞–∫ –º—ã —Å–¥–µ–ª–∞–µ–º –∫–Ω–∏–≥—É –∏–º–µ–Ω–Ω–æ–π.", parse_mode="Markdown")
    await state.set_state(Form.waiting_for_name)

# üî¥ –µ—Å–ª–∏ –Ω–µ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ
@router.message(Form.waiting_for_payment_screenshot)
async def invalid_payment_format(message: Message):
    await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.")

# üü¢ –®–∞–≥ 3 ‚Äî –ø–æ–ª—É—á–∏–ª –§–ò–û ‚Üí –ø—Ä–æ—Å–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω
@router.message(Form.waiting_for_name)
async def ask_phone(message: Message, state: FSMContext):
    full_name = message.text.strip()
    if len(full_name.split()) < 2:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤`", parse_mode="Markdown")
        return

    await state.update_data(name=full_name)
    await message.answer("üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ **–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞** ‚Äî —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.\n\n–§–æ—Ä–º–∞—Ç: +79001234567", parse_mode="Markdown")
    await state.set_state(Form.waiting_for_phone)

# üü¢ –®–∞–≥ 4 ‚Äî –ø–æ–ª—É—á–∏–ª —Ç–µ–ª–µ—Ñ–æ–Ω ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
@router.message(Form.waiting_for_phone)
async def send_to_admin(message: Message, state: FSMContext):
    phone = message.text.strip()

    if not phone.startswith("+") or not phone[1:].isdigit() or len(phone) < 11:
        await message.answer("‚ùó –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79001234567")
        return

    await state.update_data(phone=phone)
    data = await state.get_data()

    name = data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    screenshot_file_id = data.get("screenshot_file_id")
    username = message.from_user.username or "‚Äî"
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    user_data_dict[user_id] = {
        "name": name,
        "phone": phone
    }

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="üìò –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"confirm_payment:{user_id}")
    builder.adjust(1)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    caption = (
        f"üÜï –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂\n\n"
        f"üë§ –§–ò–û: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üîó Telegram: @{username}\n"
        f"üñº –ß–µ–∫ –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏"
    )

    await message.bot.send_photo(
        chat_id=ADMIN_ID,
        photo=screenshot_file_id,
        caption=caption,
        reply_markup=builder.as_markup()
    )

    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.\n\n"
        "üìò –í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ —Ç–µ–±–µ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–Ω–∏–≥–∏. "
        "–û–Ω–∞ –ø—Ä–∏–¥—ë—Ç –ø—Ä—è–º–æ —Å—é–¥–∞, –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n"
        "–û–∂–∏–¥–∞–π. –í—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É."
    )

    await state.clear()

# üü¢ –®–∞–≥ 5 ‚Äî –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç ‚Üí –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–∏–≥—É
@router.callback_query(F.data.startswith("confirm_payment:"))
async def confirm_payment(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ–ø–ª–∞—Ç—É.", show_alert=True)
        return

    user_id = int(callback.data.split(":")[1])
    user_data = user_data_dict.get(user_id, {})
    name = user_data.get("name", "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å")
    phone = user_data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω")

    pdf_path = generate_personal_pdf(name=name, phone=phone)
    pdf = FSInputFile(pdf_path)

    await callback.message.bot.send_document(
        chat_id=user_id,
        document=pdf,
        caption="üìò –í–æ—Ç —Ç–≤–æ—è –∫–Ω–∏–≥–∞. –£–¥–∞—á–∏!"
    )
    await callback.answer("‚úÖ –ö–Ω–∏–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    # üîÅ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü (QR)
@router.callback_query(F.data == "pay_qr")
async def show_qr(callback: types.CallbackQuery, state: FSMContext):
    photo = FSInputFile("files/qr.png")
    data = await state.get_data()
    price = data.get("price", "2900")

    await callback.message.answer_photo(photo)

    await callback.message.answer(
        f"üì≤ –ì–æ—Ç–æ–≤–æ –∫ –æ–ø–ª–∞—Ç–µ.\n\n"
        f"–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –∫–Ω–∏–≥—É, –ø—Ä–æ—Å—Ç–æ:\n"
        f"‚Äî –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –≤—ã—à–µ –∫–∞–º–µ—Ä–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        f"–∏–ª–∏\n"
        f"‚Äî <a href='https://www.tinkoff.ru/rm/r_rPnohUIkbB.eRVktSOsDc/3Ioud12615'>–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏</a> –∫–∞—Ä—Ç–æ–π –∏–ª–∏ —á–µ—Ä–µ–∑ –°–ë–ü\n\n"
        f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±–ª–µ–π\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª",
        parse_mode="HTML"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_payment_started")
    builder.adjust(1)
    await callback.message.answer("–ö–æ–≥–¥–∞ –æ–ø–ª–∞—Ç–∏—à—å ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:", reply_markup=builder.as_markup())

