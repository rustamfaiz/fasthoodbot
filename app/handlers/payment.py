from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import FSInputFile
from utils.pdf_generator import generate_personal_pdf

import random
import os

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()

# –°–ª–æ–≤–∞—Ä—å —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –∏ —Å–∫–∏–¥–∫–∞–º–∏
PROMOCODES = {
    "FAT2024": 2500
}

# –®–∞–≥ 4 ‚Äî –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞
@router.callback_query(F.data == "get_book")
async def ask_region(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="–†–æ—Å—Å–∏—è", callback_data="region_ru")
    builder.button(text="–î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã", callback_data="region_other")
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_start")
    builder.adjust(1)

    await callback.message.answer(
        "üìç –£–∫–∞–∂–∏ —Ä–µ–≥–∏–æ–Ω ‚Äî –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã:",
        reply_markup=builder.as_markup()
    )

# –®–∞–≥ 5.1 ‚Äî –†–µ–≥–∏–æ–Ω: –†–æ—Å—Å–∏—è ‚Üí –ø—Ä–æ—Å–∏–º –ø—Ä–æ–º–æ–∫–æ–¥
@router.callback_query(F.data == "region_ru")
async def ask_promocode(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(region="ru")
    await callback.message.answer(
        "üéÅ –£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?\n\n"
        "–í–≤–µ–¥–∏ –µ–≥–æ —Å–µ–π—á–∞—Å.\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ¬´-¬ª"
    )

# –®–∞–≥ 5.2 ‚Äî –†–µ–≥–∏–æ–Ω: –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã ‚Üí –æ–ø–ª–∞—Ç–∞ —Å—Ä–∞–∑—É
@router.callback_query(F.data == "region_other")
async def handle_other_countries(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ I Paid", callback_data="paid_other")
    builder.adjust(1)

    await callback.message.answer(
        "üí≥ <b>Payment</b>\n"
        "To get the book, please pay via the link below:\n"
        "üîó <a href='https://example.com/pay_world'>PAY NOW</a>\n\n"
        "Once paid, click 'I Paid' and we‚Äôll send you your personal file.",
        reply_markup=builder.as_markup(),
        disable_web_page_preview=True
    )

# –®–∞–≥ 5.3 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã
@router.message(F.text)
async def handle_promocode(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    region = user_data.get("region")

    if region != "ru":
        return

    code = message.text.strip().upper()

    if code == "-":
        await message.answer(
            "–û–∫, –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç ‚Äî –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ!\n\n"
            "–ó–∞–±–∏—Ä–∞–π –∫–Ω–∏–≥—É —Å –ª–∏—á–Ω–æ–π —Å–∫–∏–¥–∫–æ–π –æ—Ç –∞–≤—Ç–æ—Ä–∞:\n"
            "–†–æ–∑–Ω–∏—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–Ω–∏–≥–∏ –§–∞—Å—Ç–•—É–¥ ‚Äî –ñ–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ –∑–∞ 4 –º–µ—Å—è—Ü–∞ –±–µ–∑ –≥–æ–ª–æ–¥–∞ –∏ –±–µ–≥–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–∏ ‚Äî 3500 —Ä—É–±–ª–µ–π\n\n"
            "–¶–µ–Ω–∞ –¥–ª—è —Ç–µ–±—è ‚Äî <b>2900 —Ä—É–±–ª–µ–π</b>"
        )
        discount_price = 2900

    elif code in PROMOCODES:
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.\n\n"
            f"–†–æ–∑–Ω–∏—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–Ω–∏–≥–∏ –§–∞—Å—Ç–•—É–¥ ‚Äî –ñ–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ –∑–∞ 4 –º–µ—Å—è—Ü–∞ –±–µ–∑ –≥–æ–ª–æ–¥–∞ –∏ –±–µ–≥–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–∏ ‚Äî 3500 —Ä—É–±–ª–µ–π\n\n"
            f"–° —Ç–≤–æ–∏–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–Ω–∏–≥–∏ ‚Äî <b>{PROMOCODES[code]} —Ä—É–±–ª–µ–π</b>"
        )
        discount_price = PROMOCODES[code]

    else:
        await message.answer(
            "‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç.\n"
            "–ü—Ä–æ–≤–µ—Ä—å –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´-¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –Ω–µ–≥–æ ‚Äî —Å –ª–∏—á–Ω–æ–π —Å–∫–∏–¥–∫–æ–π –æ—Ç –∞–≤—Ç–æ—Ä–∞."
        )
        return

    await state.update_data(discount_price=discount_price)

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_russia")
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_start")
    builder.adjust(1)

    await message.answer(
        "üëá –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª, –∏ –º—ã –ø—Ä–∏—à–ª—ë–º —Ç–µ–±–µ –∏–º–µ–Ω–Ω—É—é –∫–Ω–∏–≥—É.",
        reply_markup=builder.as_markup()
    )

# –®–∞–≥ 6 ‚Äî –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã (–≤–≤–æ–¥ –§–ò–û)
@router.callback_query(F.data.startswith("paid_"))
async def ask_name(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.waiting_for_name)
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ –§–ò–û (–¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –≤ –∫–Ω–∏–≥–µ):")

# –®–∞–≥ 7 ‚Äî –ü–æ–ª—É—á–∏–ª–∏ –∏–º—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
@router.message(Form.waiting_for_name)
async def ask_phone(message: types.Message, state: FSMContext):
    print("üìù –ü–æ–ª—É—á–µ–Ω–æ –§–ò–û:", message.text)
    await state.update_data(full_name=message.text)
    await state.set_state(Form.waiting_for_phone)
    await message.answer("üìû –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ):")

# –®–∞–≥ 8 ‚Äî –ü–æ–ª—É—á–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
@router.message(Form.waiting_for_phone)
async def generate_and_send(message: types.Message, state: FSMContext):
    print("‚öôÔ∏è generate_and_send START")

    try:
        data = await state.get_data()
        full_name = data.get("full_name", "–ò–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        phone = message.text

        print(f"üì© –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω: {phone}")
        print(f"üë§ –ò–º—è –≤ state: {full_name}")

        await message.answer("üìö –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–≤–æ—é –∏–º–µ–Ω–Ω—É—é –∫–Ω–∏–≥—É...")

        input_path = "files/—Ç–µ—Å—Ç –∫–Ω–∏–≥–∏.pdf"
        output_path = f"files/generated_{random.randint(1000, 9999)}.pdf"

        pdf_path = generate_personal_pdf(input_path, output_path, full_name, phone)

        if pdf_path and os.path.exists(pdf_path):
            print(f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω: {pdf_path}")
            await message.answer_document(FSInputFile(pdf_path))
            await message.answer(
                "‚úÖ –ì–æ—Ç–æ–≤–æ!\n"
                "–≠—Ç–æ —Ç–≤–æ—è –∏–º–µ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞. –ß–∏—Ç–∞–π, –ø—Ä–∏–º–µ–Ω—è–π ‚Äî –∏ —Å–æ–∂–≥–∏ –≤–µ—Å—å –∂–∏—Ä –∑–∞ 4 –º–µ—Å—è—Ü–∞.\n\n"
                "üìå –≠—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª. –î–∞—Ä–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è–º. –õ—É—á—à–µ –¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã.\n"
                "–ü—Ä–∏—Å—ã–ª–∞–π —Ñ–æ—Ç–æ –≤ –Ω–æ–≤–æ–º —Ç–µ–ª–µ –∏ –æ—Ç–º–µ—á–∞–π @rustam_faiz üòâ"
            )
        else:
            print("‚ùå PDF –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏ @rustam_faiz.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ generate_and_send: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

    await state.clear()
